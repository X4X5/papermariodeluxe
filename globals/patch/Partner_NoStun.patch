% When using a @Hook you MUST use the RomAddress. What happens next is that it gets written somewhere in RAM automatically by Star Rod.
% However, you MUST include the first two ROM instructions since it overwrites.

@Hook 8090C { % (800E745C) Loads end of routine that blanks out partner HP data and then has it overwrite with partner HP values. (Now used to set everyone's HP on game boot up)
	% Mario's base RAM is at 8010F290. Partner base RAM is at 8010F2A4
	% Mario
	PUSH	A0, V0, V1, S0, S1, RA % A0 is main register for base RAM (1E, 1F, 20 for data using A0)
	ADDIU 	V0, R0, 0000 % Counter
	ADDIU	V1, R0, 000C % Total Partners to Heal
	LIO		S0, $MaxStarterHP
	LB		S1, 0000 (S0) % Loads Mario's max HP first
	SB		S1, 0002 (A0) % Stores to Mario's current HP
	SB		S1, 0003 (A0) % Stores to Mario's max HP
	SB		S1, 0004 (A0) % Stores to Mario's true max HP
	ADDIU	V0, V0, 0001 % Increases counter to 01 so it loads next max HP data (Begins partners)
	ADDIU	S0,	S0,	0001 % Increases table reading for max starter HP
	% Start Partner data
	.NextStarterHP
	LB		S1, 0000 (S0)
	SB		S1, 001E (A0) % Stores to partner's current HP
	SB		S1, 001F (A0) % Stores to partner's max HP
	SB		S1, 0020 (A0) % Stores to partner's true max HP
	ADDIU	V0, V0, 0001 % Increases counter to 01 so it loads next max HP data (Begins partners)
	ADDIU	S0,	S0,	0001 % Increases table reading for max starter HP
	ADDIU	A0,	A0, 0008 % Increases RAM to store max starter HP to.
	BNE		V0,	V1, .NextStarterHP
	NOP
	% End routine
	POP		A0, V0, V1, S0, S1, RA
	ADDIU	V1, R0, 001F
	ADDIU	V0, A0, 003E
	J		800E7464
	NOP
}
	

@Function 1A6968 { % (80266270) Routine that sets partner's to 'knocked-out' status when hit (Ends up loading 802661C0 to set the status data)
	NOP
	NOP
	NOP
	NOP
}
/% 	JAL		80265F40 % Loads routine that sets partner as 'knocked-out'
	ADDIU	A1, R0, 000D % Loads 000D into A1 to set status as 'knocked-out'
	JAL		80149CB4 % Loads routine to play SFX when partner is hit
	ADDIU	A0, R0, 2107 % Loads what SFX to play for when partner is hit %/ 


@Function 1A5B40 { % (80277260) Loads routine that disables partners from storing their own HP value pre-damage (Removes beginning of Mario's routine as well since it's being moved)
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
}

	
@Hook 1A5B5C { % This allows the damage calculation to load partner's RAM for HP instead of Mario's RAM when they get hit.
 % (80277288) Loads routine that stores partner's HP from RAM into new RAM for damage calculation. (Mario's is prior to this and it's hardcoded)
	ADDIU	V0, R0, 0100
	BEQ 	A0, V0 .PartnerDamagePreSetup
	LUI		V0, 8011
	ADDIU	V0, V0, F290
	LBU		V0, 0002 (V0)
	J		80277288
	NOP
	.PartnerDamagePreSetup
/% 	LUI		V0, 8011
	ADDIU	V0, V0 F290
	LBU		V0, 0012 (V0) %/
	LUI		V0, 8011 % Load base RAM into V0
	LBU		V0, F2A2 (V0) % Load bytes upper to get RAM pointer to current partner value into V0
	SLL		V0, V0, 3
	SB		V0, 01B8 (S0)
	LUI		V0, 8011
	ADDIU	V0, V0, F2A4
	LBU		S1, 01B8 (S0)
	ADD		V0, S1, V0
	LBU		V0, 0002 (V0)
	J		80277288
	NOP
}
	
@Function 1A5DBC { % (802774DC) Loads routine that disables partners from being damaged properly and decrease HP (Removes beginning of Mario's routine as well since it's being moved)
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
}

@Hook 1A5DD8 { % This allows the damage calculation to load partner's RAM for HP instead of Mario's RAM when they get hit.
 % (802774F8) Loads routine that stores partner's HP from RAM into new RAM for damage calculation. (Mario's is prior to this and it's hardcoded)
	BEQ		S6, V0, .PartnerDamageCalculation
	SH 		R0, 01F8 (S3)
	LUI		V0, 8011
	LBU		V0, F292 (V0)
	SB		V0, 01B8 (S3) % Storage for Mario's HP possibly
	J 		80277500
	NOP
	.PartnerDamageCalculation
	LUI		V0, 8011 % Load base RAM into V0
	LBU		V0, F2A2 (V0) % Load bytes upper to get RAM pointer to current partner value into V0
	SLL		V0, V0, 3 % Multiply V0 by 3 essentially.
	SB		V0, 01B8 (S3) % Store to (S3) + 01B8 via V0
	LUI		V0, 8011 % Load base RAM into V0
	ADDIU	V0, V0, F2A4 % Load bytes upper to get RAM pointer to partner base RAM into V0
	LBU		V1, 01B8 (S3) % Load (S3) + 01B8 into V1.
	ADD		V0, V1, V0 % Add V0 and V1 together to get RAM of partner.
	LBU		V0, 0002 (V0) % Loads partner HP
	J 		80277500
	NOP
}
	
@Function 1A6238 { % (80277958) Loads checks that disables partners from being damaged when blocking. (Removed so partners take less damage like Mario when blocking)
	NOP
	NOP
	NOP
	NOP
	NOP
}
	


@Function 1A5DE4 { % (80277504) Removed the ADDIU function so it stores all HP properly for both partner and Mario.
	SB		V0, 01B8 (S3)
	%ADDIU		V0, R0, 007F
	NOP
	SB		V0, 01B8 (S3)
}
	

@Hook 1A644C { % (80277B6C) Loads code that stores HP value back to RAM. (Altered now so it can store back to partner RAM)
	BNE		S6, R0, .PartnerDamaged % Jumps to partner HP if the 'target' bit is 01 (Partner)
	SH		R0, 01FA (S3)
	LBU		V0, 007B (S4)
	ADDU	V0, V0, S0
	SB		V0, 007B (S4)
	LBU		V0, 01B8 (S3)
	LUI		AT, 8011
	SB		V0, F292 (AT)
	J 80277B8C
	SH		R0, 01FA (S3)
		.PartnerDamaged % Partner HP
	PUSH	S0, S1, RA
	LBU		V0, 007B (S4)
	ADDU	V0, V0, S0
	SB		V0, 007B (S4)
	LBU		V0, 01B8 (S3)
	LUI		S0, 8011 % Load base RAM into 'Register: S0'
	LBU		S0, F2A2 (S0) % Load bytes upper to get RAM pointer to current partner value into 'Register: S0'
	SLL		S0, S0, 3 % Multiplies partner value by itself 3 times to get the proper RAM data location.
	LUI		S1, 8011 % Load base RAM into 'Register: S0'
	ADDIU	S1, S1, F2A4 % Load base partner RAM into 'Register: S0'
	ADD		S1, S0, S1 % Adds total partner value + partner RAM to get current partner's HP.
	SB		V0, 0002 (S1) % Stores new health into partner RAM
	POP		S0, S1, RA
	J 80277B8C
	NOP
}
		
@Hook 83114 { % (800E9C64) Loads code that stores Mario's current HP into 8010EF58 + 003D = 8010EF95 for UI display data. (Now adds partner's current HP at 8010EF58 + 0059 = 8010EFB1 for UI display)
	SB		V0, 3D (S1) % Stores Mario's HP
	SB		A1, 3E (S1) % Stores Flower Points
	LUI		S3, 8011 % Loads base RAM
	ADDIU	S3, S3 F290 % Adds base RAM pointer for Mario's RAM
	LBU		S3, 0012 (S3) % Loads 8010F2A2 to gather current partner
	SLL		S3, S3, 3 % Multiplies it 3 times
	LUI		V0, 8011 % Loads base RAM
	ADDIU	V0, V0 F2A4 % Adds base RAM pointer for Partner RAM setup
	ADD		S3, V0, S3 % Adds base RAM pointer for Partner RAM setup and the total value of the partner multplied by 3
	LBU		V0, 0002 (S3) % Loads partner's current HP
	SB		V0, 59 (S1) % Stores partner's HP
	J 800E9C6C % Returns back to right after storage of Mario's HP and Flower Points
	NOP
}
		
@Hook 817E8 { % (800E8338) Loads end of Mario's current HP code and now loads new code so partner's current HP can be loaded.
	LUI		S0, 8011 % Loads base RAM
	ADDIU	S0, S0 F290 % Adds base RAM pointer for Mario's RAM
	LBU		S0, 0012 (S0) % Loads 8010F2A2 to gather current partner
	SLL		S0, S0, 3 % Multiplies it 3 times
	LUI		V0, 8011 % Loads base RAM
	ADDIU	V0, V0 F2A4 % Adds base RAM pointer for Partner RAM setup
	ADD		S0, V0, S0 % Adds base RAM pointer for Partner RAM setup and the total value of the partner multplied by 3
	LB		A0, 0059 (S3) % Loads partner's current HP from UI display data
	LB		V1, 0002 (S0) % Loads partner's current HP from their RAM
	BEQ		A0, V1, .o30
	NOP
	LUI		V0, 8007
	LW		V0, 419C (V0)
	LB		V0, 0070 (V0)
	BNE		V0, R0, .o10
	SLT		V0, V1, A0
	BEQ		V0, R0, .o10
	NOP
	%JAL		800E9920 %comment out to remove flicker
	%NOP
		.o10
	LB		V0, 0059 (S3)
	LB		V1, 0002 (S0) % Loads partner's current HP from their RAM
	SLT		V0, V0, V1
	BEQ		V0, R0, .o20
	LBU		V1, 0059 (S3) % Load partner HP from UI storage
	LH		V0, 0036 (S3)
	SLTI	V0, V0, 0012
	BNE		V0, R0, .o40
	NOP
	LUI		V0, 8007
	LW		V0, 419C (V0)
	LHU		V0, 0134 (V0)
	ANDI	V0, V0, 0003 % Speed which HP changes (Was 0003)
	BNE		V0, R0, .o30
	ADDIU	V0, V1, 0001
	SB		V0, 0059 (S3) % Store partner HP to UI storage
	JAL		80149CB4
	ADDIU	A0, R0, 0213
	BEQ		R0, R0, .o30 % Altered so it's a branch that ALWAYS jumps!
%
		.o40
	LUI		V0, 8007
	LW		V0, 419C (V0)
	LHU		V0, 0134 (V0)
	ANDI	V0, V0, 0003 % Speed which HP changes (Was 0003)
	BNE		V0, R0, .o30
	ADDIU	V0, V1, 0001
	SB		V0, 0059 (S3) % Store partner HP to UI storage
	BEQ		R0, R0, .o30 % Altered so it's a branch that ALWAYS jumps!
%
		.o20
	LUI		V0, 8007
	LW		V0, 419C (V0)
	LHU		V0, 0134 (V0)
	ANDI	V0, V0, 0003 % Speed which HP changes (Was 0003)
	BNE		V0, R0, .o30
	ADDIU	V0, V1, FFFF
	SB		V0, 0059 (S3) % Store partner HP to UI storage
%
		.o30 % End of routine
	LB		A0, 003E (S3)
	LUI		V1, 8011
	J		800E8340
	NOP
}


@Hook 837D4 { % Loads heart block code that heals Mario so now it affects all partners.
	PUSH	RA
	JAL		$RestoreFullHP % Loads a new Global Function that's used to restore everyone's HP to max.
	NOP
	POP		RA
	J		800EA32C
	NOP
}
	
@Hook F6880 { % (802D1ED0) Loads code that restores Mario's HP & FP upon resting at an inn.
	SB		V1, 0002 (V0) % Stores Mario's max HP to his current HP
	SB		A0, 0005 (V0) % Stores max FP to current FP
	%
	PUSH	RA
	JAL		$RestoreFullHP % Loads a new Global Function that's used to restore everyone's HP to max.
	NOP
	POP		RA
	J		802D1ED8
	NOP
}

@Hook CB9D4 { % (801352D4) Loads heart object code that heals Mario's HP by 1. (Dropped from enemies after battle)
%Register S3: Set to 8010F290 (Mario's data RAM location)
	PUSH	S3, V0, V1, RA
	% Mario
		LBU		V0, 0002 (S3) % Loads Mario's current HP
		LB		V1, 0003 (S3) % Loads Mario's max HP
		ADDIU	V0, V0, 0001 % Adds 0001 to Mario's current HP
		SB		V0, 0002 (S3) %Stores back to Mario's current HP in RAM
		SLL		V0, V0, 18 % This might be unnecessary as it just flips the byte to high then low.. seems pointless since it sets it back to the original value.
		SRA		V0, V0, 18
		SLT		V1, V1, V0 % If Mario's current HP is higher than his max, this will set it back to the max HP.
		LBU		V0, 0003 (S3) % Loads Mario's max HP
		BNEL	V1, R0, .HeartObject_PartnerHP
		SB		V0, 0002 (S3) % Stores Mario's current HP back
	% Partner HP
	.HeartObject_PartnerHP
	%Register S3: Set to 8010F2A4 (Partner's data base RAM Location) + total partner value as base RAM
		% This section gets the partner and then gets the base RAM to get their stats.
		LABU	V0, 8010F2A2 % Loads partner value
		SLL		V0, V0, 3 % Multiplies it 3 times
		LUI		S3, 8011 % Loads base RAM
		ADDIU	S3, S3, F2A4 % Adds base RAM pointer for partner RAM setup
		ADD		S3, V0, S3 % Adds base RAM pointer for partner RAM setup and the total value of the partner multplied by 3
		% This section stores parnter HP
		LBU		V0, 0002 (S3) % Loads Partner's current HP
		LB		V1, 0003 (S3) % Loads Partner's max HP
		ADDIU	V0, V0, 0001 % Adds 0001 to Partner's current HP
		SB		V0, 0002 (S3) %Stores back to Partner's current HP in RAM
		SLL		V0, V0, 18 % This might be unnecessary as it just flips the byte to high then low.. seems pointless since it sets it back to the original value.
		SRA		V0, V0, 18
		SLT		V1, V1, V0 % If Partner's current HP is higher than his max, this will set it back to the max HP.
		LBU		V0, 0003 (S3) % Loads Partner's max HP
		BNEL	V1, R0, .HeartObject_End
		SB		V0, 0002 (S3) % Stores Partner's current HP back
	.HeartObject_End
	POP		S3, V0, V1, RA
	J		801352FC
	NOP
}

% Battle code
/%
@Function 41D3F0  {% (802A8660) Loads routine that sets max options that can be set for partner and what the max default option would be.
	ADDIU	S1, R0, 0002 % Now set to 02 instead of 01. (Partners can now have 3 options as default instead of having it always set back to 01.)
}
@Function 41D3FC { % (802A8658) Loads routine that determines how many options partners will have in battle to select from.
% This is partially broken! It will ONLY load properly if Mario first opens up the screen. There needs to be new code farther down that actually STORES the run away data so it always appears.)
	ADDIU	S0, R0, 0003 % Now set to 03 instead of 02. (Partners now load a 3rd command on screen which is run away!)
}
	
@Function 41E364 { % (802A95D4 Base address) Loads routine that determines how many 'Strategy' options partners will have in battle to select from.
	ADDIU	S0, S0, 0002 % Now set to 02 instead of 01. (Partners now load a 3rd command on screen which is run away!)
}


@Hook 41E358 { % (802A95C8) Loads end of routine that sets 'Do Nothing' command for partners.
% Now loads 'Run Away' for partners
	SW		V0, D658 (AT)
	%
	LUI		T1, 802B
	ADDIU	T1, T1, B488 % Gets RAM pointer for ??? (Not sure what this is for)
	SLL		A1, T5, 2
	LUI		A0, 802B
	ADDIU	A0, A0, B490 % Loads base for 'Run Away' text
	%
	LUI		V1, 802B
	ADDIU	V1, V1, D640 % Base RAM for ??? storage
	LW		V0, 0000 (T1)
	ADDU	A3, A1, V1
	SW		V0, 0000 (A3)
	ADDIU	V0, R0, 0003 % Sets 'Run Away' command
	%
	LUI		AT, 802B
	ADDU	AT, AT, A1
	SW		V0, D678 (AT) % Stores 'Run Away' command
	%
	LUI		V0 802B
	ADDIU	V0, V0, D690
	ADDU	V1, A1, V0
	SW		S0, 0000 (V1) % Stores 'Run Away' active byte
	LW		V0, 000C (A0)
	LUI 	A2, 001D % Loads base type for 'Run Away' description text
	ORI		A2, A2, 00A3 % Loads pointer to 'Run Away' description text
	%
	LUI		AT, 802B
	ADDU	AT, AT, A1
	SW		A2, D6C0 (AT) % Stores 'Run Away' description
	%
	LUI		AT, 802B
	ADDU	AT, AT, A1
	SW		V0, D658 (AT) % Stores 'Run Away' icon
	%
	LB		V0, 0063 (S4)
	J		802A95D0
	NOP
}
%/

/%
@Function 41D368 { % (802A85D8) Loads routine that sets what commands partners load when it's their turn in battle. (Removed data so there's no excess)
	NOP
	SW	S0, 0008 (S3) % Stores ability to be the third command
	SW	V0, 0008 (S8) % Stores ability to be the third command (Uses (F8) but Star Rod doesn't recognize that so it's actually S8)
	SW	V1, 0008 (S2) % Stores ability to be the third command
}
	@Hook 41D360 { % (802A85D0) Loads routine that sets what commands partners load when it's their turn in battle. (This will cause problems as if there's no items, partners can still load the item menu)
		LUI		AT, 802B % Loads base RAM
		ADDIU	A1, R0, 0002 % Loads 'Items' command
		SW		A1, D0BC (AT) % Stores to 802AD0C0 so partner has the 'Items' command
		ADDIU	A1, R0, 0050 % Loads 'Items' text
		SH		A1, D09A (AT) % Stores to 802AD09C so it loads the 'Items' text for the 'Items' command
		ADDIU	A1, R0, 8924% Loads 'Items' icon
		SH		A1, D082 (AT) % Stores to 802AD082 so it loads the 'Items' icon for the 'Items' command
		ADDIU	A1, R0, 0006 % Loads 'Abilities' command
		SW		A1, D0C0 (AT) % Stores to 802AD0BC so Partner has the 'Abilities' command
		J 802A85D8
		NOP
	}
%/
	
@Function 80078 { % (800E6BC8) Loads part of routine that specifically checks for Goompa in the partner menu. If so, disable him from appearing. (Removed so now he appears if he is available)
	NOP
	NOP
}
	
@Function 191BC4 { % Loads routine that disables Goompa from showing 'Change Member' when in battle
	LB		V1, 0012 (T0)
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
}
	
	
@Function 194AAC { % (802661CC) Loads code that stuns partner when they come in contact with a spike in battle
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
}

@Hook 1AE2E4 { % (8027FA04) Loads code that sets partners HP in their battle RAM as 00
% Redone so now it properly stores their HP and calculates damage with it.
	PUSH	V0, V1, A0, A1, A2, A3, T1, RA
	LHU		V1, 01FA (S0)
	LABU	T1, 8010F2A2 % Loads partner value
    SLL		T1, T1, 3 % Multiplies it 3 times
    LUI		A3, 8011 % Loads base RAM
    ADDIU	A3, A3, F2A4 % Adds base RAM pointer for partner RAM setup
    ADD		A3, T1, A3 % Adds base RAM pointer for partner RAM setup and the total value of the partner multplied by 3
	%
	ADDU	V1, V1, A1
	SLL		V0, V1, 10
	SRA		A1, V0, 10
	SH		V1, 01FA (S0)
	LBU		T1, 0002 (A3) % Loads partner's current HP
	LHU		V0, 01FC (S0)
	LHU		V1, 01FA (S0)
	ADDU	V0, V0, A1
	SUBU	V1, V1, A1
	SH		V0, 01FC (S0)
	SB		T1, 01B8 (S0)
	SH		V1, 01FA (S0)
	SH		R0, 0180 (S2)
	POP		V0, V1, A0, A1, A2, A3, T1, RA
	J		8027FA0C
	NOP
}
	
@Hook 186C1C { % (8025833C) Loads end of check for Mario HP to display Danger or Peril.
% Now loads partner HP so they can display it as well.
% S0 = Partner RAM + 0436 = Where to display
% S1 = Mario base RAM (8010F290)
	PUSH	V0, V1, A0, A1
	LABU	T0, 8010F2A2 % Loads partner value
    SLL		T0, T0, 3 % Multiplies it 3 times
    LUI		V0, 8011 % Loads base RAM
    ADDIU	V0, V0, F2A4 % Adds base RAM pointer for partner RAM setup
    ADD		T0, V0, T0 % Adds base RAM pointer for partner RAM setup and the total value of the partner multplied by 3
	% Check for PERIL
	LB		V0, 0002 (T0) % Load partner's current HP
	SLTI	V0, V0, 0002 % Checks for HP  'less than 2' or less to display 'PERIL'
	BNE		V0, R0, .Partner_PerilDanger_Jump1
	NOP
	JAL		800480F4
	LH		A0, 0436 (S0) % Loads partner RAM value
	% Check for DANGER
	LB		V0, 0002 (T0) % Load partner's current HP
	SLTI	V0, V0, 0006 % Checks for HP being 'less than 6'
	BNE		V0, R0, .Partner_PerilDanger_Jump2
	NOP
	BEQ		R0, R0	.Partner_PerilDanger_Jump3
	NOP
	.Partner_PerilDanger_Jump1
	JAL		80048064
	LH		A0, 0436 (S0) % Loads partner RAM value
	BEQ		R0, R0	.Partner_PerilDanger_Jump3
	NOP
	.Partner_PerilDanger_Jump2
	JAL		80048170
	LH		A0, 0436 (S0) % Loads partner RAM value
	JAL		800480F4
	LH		A0, 0436 (S0) % Loads partner RAM value
	BEQ		R0, R0	.Partner_PerilDanger_End
	NOP
	%
	JAL		800480F4
	LH		A0, 0436 (S0) % Loads partner RAM value
	.Partner_PerilDanger_Jump3
	JAL		80048200
	LH		A0, 0436 (S0) % Loads partner RAM value
	%
	.Partner_PerilDanger_End
	POP		V0, V1, A0, A1
	%
	LB		V1, 0218 (S6)
	ADDIU	V0, R0, 000E
	J		80258344
	NOP
}
	
	
	
	
	
@Function 1AD010 {% (8027E730) Sets what damage animation(?) to use for partners when they hit a spike on an enemy. (NOTE THIS FOR OTHER STATUS EFFECTS)
	JAL		8027FB9C
	ADDIU	A1, R0, 002A % Originally was A1 but that gets heavily overwritten. This allows partners to bounce back to their original position THEN die.
	/% ADDIU	T0, R0, 002A % Originally was A1 but that gets heavily overwritten. This allows partners to bounce back to their original position THEN die. %/
}
	
	
	
@Hook 1AE330 { % (8027FA50) Loads code that enables partner to die properly from being damaged on spike at last HP (MUST HAVE CHECKS SCRIPTED OUT IN PARTNERS FOR IT TO WORK)
	BGTZ	V1, .Partner_SetDamageType
	ADDIU	S1, S0, 000C
	LHU		V0, 0180 (S2)
	ADDU	T0, R0, S3 % This will move whatever value is in S3 to T0 for testing checks
	ADDIU	S3, R0, 0020
	ADDU	V0, V0, V1
	SH		V0, 0180 (S2)
	SB		R0, 01B8 (S0)
	.Partner_SetDamageType
	NOP % Used for Hook
	NOP % Used for Hook
	ADDIU	V0, R0, 0009 % Check for 'HitCombo'
	BEQL	S3, R0, .Partner_DamageType_NoHitCombo
	ADDIU	S3, R0, 000A % Set 'Hit'
	.Partner_DamageType_NoHitCombo
	%
	ADDIU	V0, R0, 0017 % Check for 'UnknownTrigger'
	BEQL	S3, V0, .Partner_DamageType_NoUnknownTrigger
	ADDIU	S3, R0, 0019 % Set 'Immune'
	.Partner_DamageType_NoUnknownTrigger
	% All death settings go here
		ADDIU	V0, R0, 0020 % Check for 'Death'
		BNE		S3, V0, .Partner_DamageType_EndCheck
		ADDIU	V0, R0, 002A % Check for 'SpikeContact'
		BEQL	T0, V0, .Partner_DamageType_NoSpikeContact
		ADDIU	S3, R0, 0027 % Set 'SpikeDeath'
		.Partner_DamageType_NoSpikeContact
		%
		ADDIU	V0, R0, 002C % Check for 'BurnContact'
		BEQL	T0, V0, .Partner_DamageType_NoBurnContact
		ADDIU	S3, R0, 0024 % Set 'BurnDeath'
		.Partner_DamageType_NoBurnContact
		%
		ADDIU	V0, R0, 002F % Check for 'ShockHit'
		BEQL	T0, V0, .Partner_DamageType_EndCheck
		ADDIU	S3, R0, 0026 % Set 'ShockDeath'
	.Partner_DamageType_EndCheck
	%
	BNE		A2, R0, .Partner_DamageType_End
	ADDIU	V0, R0, 0001
	DADDU	A0, S1, R0
	DADDU	A1, R0, R0
	NOP
	NOP
	NOP
	NOP
	NOP %ADDIU	A1, R0, 0100 (Not needed? Replaced with NOP)
	JAL		80269754
	DADDU	A2, R0, R0
	ADDIU	V0, R0, 0001
	.Partner_DamageType_End
	J 8027FAF0
	SW		V0, 0010 (SP)
}
	
@Hook 1AE350 { % (8027FA70) Loads code to end partner being damaged by spike
% Now does same code but also includes storing their lowered HP back to their current HP
	PUSH	V0, V1, RA
	LHU		V0, 0180 (S2)
	ADDU	V0, V0, A1
	SH		V0, 0180 (S2)
	SH		V0, 01F8 (S2)
	% Loads partner HP 
	LABU	V0, 8010F2A2 % Loads partner value
    SLL		V0, V0, 3 % Multiplies it 3 times
    LUI		V1, 8011 % Loads base RAM
    ADDIU	V1, V1, F2A4 % Adds base RAM pointer for partner RAM setup
    ADD		V1, V0, V1 % Adds base RAM pointer for partner RAM setup and the total value of the partner multplied by 3
	LBU		V0, 01B8 (S0) % Loads calculated HP
	SB		V0, 0002 (V1) % Stores back to partner's current HP
	POP		V0, V1, RA
	J		8027FA74
	NOP
}